name: CI/CD Pipeline - Buchverwaltung Fullstack

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Backend Testing
  backend-test:
    runs-on: ubuntu-latest
    name: Backend Tests
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: books
          POSTGRES_PASSWORD: books
          POSTGRES_DB: books_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx

    - name: Run backend tests
      env:
        DATABASE_URL: postgresql+psycopg2://books:books@localhost:5432/books_test
      run: |
        cd backend
        python -m pytest tests/ -v --tb=short

  # Frontend Testing
  frontend-test:
    runs-on: ubuntu-latest
    name: Frontend Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Run frontend tests
      run: |
        cd frontend
        npm test

    - name: Build frontend
      run: |
        cd frontend
        npm run build

  # Docker Build and Test
  docker-build:
    runs-on: ubuntu-latest
    name: Docker Build & Test
    needs: [backend-test, frontend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and test Docker images
      run: |
        # Build backend
        docker build -f backend/Dockerfile -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }} .
        
        # Build frontend
        docker build -f frontend/Dockerfile -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }} .
        
        # Test Docker Compose
        docker compose up -d --build
        sleep 30
        
        # Health checks
        curl -f http://localhost:8001/health || exit 1
        curl -f http://localhost:8081/ || exit 1
        
        # Cleanup
        docker compose down

    - name: Push Docker images
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
        
        # Tag as latest
        docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest
        docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest
        
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    needs: [docker-build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Code Quality
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        cd backend
        pip install flake8 black isort mypy

    - name: Run Python linting
      run: |
        cd backend
        flake8 app/ --max-line-length=88 --extend-ignore=E203,W503
        black --check app/
        isort --check-only app/
        mypy app/

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci

    - name: Run TypeScript linting
      run: |
        cd frontend
        npm run lint

  # Deployment (Optional - for production)
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [backend-test, frontend-test, docker-build, security-scan, code-quality]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production..."
        echo "This is where you would add your deployment steps"
        echo "Examples:"
        echo "- Deploy to AWS ECS"
        echo "- Deploy to Google Cloud Run"
        echo "- Deploy to Azure Container Instances"
        echo "- Deploy to Kubernetes cluster"
        
        # Example deployment commands (uncomment and modify as needed):
        # aws ecs update-service --cluster production --service buchverwaltung --force-new-deployment
        # gcloud run deploy buchverwaltung --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest

    - name: Notify deployment success
      run: |
        echo "‚úÖ Deployment completed successfully!"
        echo "üåê Application URL: https://your-production-url.com"
